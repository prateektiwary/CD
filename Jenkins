pipeline {
    agent any

    // Define a string variable for the namespace
    parameters {
        string(name: 'NAMESPACE')
        string(name: 'IMAGE_TAGS')
    }

    stages {
        stage('git clone') {
            steps {
                // Get some code from a GitHub repository
                checkout scmGit(branches: [[name: '*/main']], extensions: [], userRemoteConfigs: [[url: 'https://github.com/prateektiwary/java-maven-app.git']])
            }
        }
        // stage('Image Validation') {
        //     steps {
        //         script {
        //             sh 'gcloud auth configure-docker us-docker.pkg.dev'
        //             sh 'docker pull us-docker.pkg.dev/oval-cyclist-426414-p0/myrepo/java2'
        //         }
        //     }
        // }
              stage('Image Validation') {
            steps {
                script {
                    def result = sh(returnStdout: true, script: "gcloud artifacts docker images list ${params.IMAGE_NAME} --include-tags")
                    if (result.trim() != "") {
                        echo "Image ${params.IMAGE_NAME} exists in Artifact Registry!"
                    } else {
                        error "Image ${params.IMAGE_NAME} does not exist in Artifact Registry."
                        error "exit from the pipeline"
                    }
                }
            }
        }
        // stage('Artifact image existance') {
        //     steps {
        //         script {
        //             def result = sh(returnStdout: true, script: "gcloud artifacts files list --project=oval-cyclist-426414-p0 --repository=myrepo --location=us --package=${params.Image_name} --tag=${params.Tags}")
        //             if (result.trim() != "") {
        //                 echo "Image us-docker.pkg.dev/oval-cyclist-426414-p0/myrepo/java2/${params.Image_name}:${params.Tags} exists in Artifact Registry!"
        //             } else {
        //                 error "Image us-docker.pkg.dev/oval-cyclist-426414-p0/myrepo/java2/${params.Image_name}:${params.Tags} does not exist in Artifact Registry. Aborting deployment."
        //             }
        //         }
        //     }
        // }
        stage('cluster login') {
            steps {
                script {
                    sh 'gcloud container clusters get-credentials cicd-cluster1 --zone europe-west1-c --project oval-cyclist-426414-p0'
                    //sh 'kubectl get nodes'
                }
            }
        }
        stage('namespace creation/validation') {
            steps {
                script {
                    // Check if the namespace exists
                    def exists = sh(script: "kubectl get namespace ${params.NAMESPACE} -o yaml", returnStatus: true) == 0
                    if (exists) {
                        echo "Namespace '${params.NAMESPACE}' already exists."
                    } else {
                        // Create the namespace if it doesn't exist
                        sh(script: "kubectl create namespace ${params.NAMESPACE}", returnStatus: true)
                        echo "Namespace '${params.NAMESPACE}' created."
                    }
                }
            }
        }
        stage('deployment') {
            steps {
                script {
                    // Apply the deployment.yaml file to the specified namespace
                    sh 'kubectl apply -f deployment.yaml -n "${NAMESPACE}"'
                    sh 'kubectl apply -f service.yaml -n "${NAMESPACE}"'
                    sh 'kubectl apply -f ingress.yaml -n "${NAMESPACE}"'
                }
            }
        }
    }
    post {
        success {
            // Actions to take if the pipeline succeeds
            echo 'Pipeline succeeded!'
            // You can also send an email notification on success
            mail to: 'prateektiwary2024@gmail.com',
                 subject: "Pipeline Succeeded: ${currentBuild.fullDisplayName}",
                 body: "The pipeline ${env.BUILD_URL} has successfully completed."
        }
        failure {
            // Actions to take if the pipeline fails
            echo 'Pipeline failed!'
            // You can also send an email notification on failure
            mail to: 'prateektiwary2024@gmail.com',
                 subject: "Pipeline Failed: ${currentBuild.fullDisplayName}",
                 body: "The pipeline ${env.BUILD_URL} has failed. Check the logs for details."
        }
    }
}
